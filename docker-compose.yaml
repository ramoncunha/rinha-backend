version: '3'

services:
  database:
    container_name: db-postgresql
    image: postgres:15-alpine
    command: 'postgres -c max_connections=200 -c synchronous_commit=off'
    environment:
      - POSTGRES_DB=arena
      - POSTGRES_USER=dbaccess
      - POSTGRES_PASSWORD=pgsql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d arena -U dbaccess" ]
      interval: 3s
      timeout: 5s
      retries: 10
    restart: always
    volumes:
      - ./ddl.sql:/docker-entrypoint-initdb.d/ddl.sql
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: '1.0GB'
    networks:
      - arena-network

  api1:
    container_name: api1
#    build:
#      context: .
    image: ramoncunha/rinha-api
#   entrypoint: ["/app/rinha-api"]
    environment:
      - DATABASE_URL=jdbc:postgresql://db-postgresql:5432/arena
      - DATABASE_USER=dbaccess
      - DATABASE_PASSWORD=pgsql
    depends_on:
      database:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: '0.75GB'
    networks:
      - arena-network

  api2:
    container_name: api2
#    build:
#      context: .
    image: ramoncunha/rinha-api
#    entrypoint: ["/app/rinha-api"]
    environment:
      - DATABASE_URL=jdbc:postgresql://db-postgresql:5432/arena
      - DATABASE_USER=dbaccess
      - DATABASE_PASSWORD=pgsql
    depends_on:
      database:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: '0.75GB'
    networks:
      - arena-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.5GB'
    networks:
      - arena-network

networks:
  arena-network:
    driver: bridge